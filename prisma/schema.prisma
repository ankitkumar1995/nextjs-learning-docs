// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id           String       @id
  username     String       @unique
  firstName    String
  middleName   String?
  lastName     String?
  email        String?      @unique
  phone        String?
  address      String
  profileImage String?
  bloodType    String?
  sex          UserSex
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now()) @updatedAt
  deletedAt    DateTime?
  Parent       Parent?      @relation(fields: [parentId], references: [id])
  parentId     String?
  classId      Int
  class        Class        @relation(fields: [classId], references: [id])
  Grade        Grade        @relation(fields: [gradeId], references: [id])
  gradeId      Int
  attendances  Attendance[]
  results      Result[]
}

model Teacher {
  id        String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  Subject   Subject?  @relation(fields: [subjectId], references: [id])
  subjectId Int?
  lessons   Lesson[]
  Class     Class[]
}

model Parent {
  id         String    @id
  username   String    @unique
  firstName  String
  middleName String?
  lastName   String?
  email      String?   @unique
  phone      String
  address    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  deletedAt  DateTime  @default(now())
  students   Student[]
}

model Grade {
  id        Int       @id @default(autoincrement())
  level     Int       @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  students  Student[]
  classes   Class[]
}

model Class {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  capacity      Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  deletedAt     DateTime?
  lessons       Lesson[]
  supervisorId  String
  supervisor    Teacher        @relation(fields: [supervisorId], references: [id])
  Student       Student[]
  Grade         Grade          @relation(fields: [gradeId], references: [id])
  gradeId       Int
  attendances   Attendance[]
  events        Event[]
  announcements Announcement[]
}

model Subject {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  teachers  Teacher[]
  lessions  Lesson[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
}

model Lesson {
  id          Int          @id @default(autoincrement())
  name        String
  day         Days
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  deletedAt   DateTime?
  Subject     Subject      @relation(fields: [subjectId], references: [id])
  subjectId   Int
  Class       Class        @relation(fields: [classId], references: [id])
  classId     Int
  Teacher     Teacher      @relation(fields: [teacherId], references: [id])
  teacherId   String
  assignments Assignment[]
  exams       Exam[]
}

model Exam {
  id        Int       @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  Lesson    Lesson    @relation(fields: [lessonId], references: [id])
  lessonId  Int
  results   Result[]
}

model Assignment {
  id        Int       @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  lessonId  Int
  lesson    Lesson    @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
  deletedAt    DateTime?
  Exam         Exam?       @relation(fields: [examId], references: [id])
  examId       Int?
  Assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  assignmentId Int?
  Student      Student     @relation(fields: [studentId], references: [id])
  studentId    String
}

model Attendance {
  id        Int       @id @default(autoincrement())
  date      DateTime
  status    Boolean
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  Student   Student   @relation(fields: [studentId], references: [id])
  studentId String
  Class     Class     @relation(fields: [classId], references: [id])
  classId   Int
}

model Event {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  deletedAt   DateTime?
  Class       Class?    @relation(fields: [classId], references: [id])
  classId     Int?
}

model Announcement {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  deletedAt   DateTime?
  Class       Class?    @relation(fields: [classId], references: [id])
  classId     Int?
}

enum UserSex {
  MALE
  FEMALE
}

enum Days {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}
